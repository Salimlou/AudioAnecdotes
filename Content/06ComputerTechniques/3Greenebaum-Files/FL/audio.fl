/*
 * Copyright (c) 1997-2001 Alexandros Eleftheriadis, Yuntai Kyong and 
 * Danny Hong
 *
 * This file is part of Flavor, developed at Columbia University
 * (www.ee.columbia.edu/flavor)
 *
 * Flavor is free software; you can redistribute it and/or modify
 * it under the terms of the Flavor Artistic License as described in
 * the file COPYING.txt. 
 *
 */

/* 
 * Authors:
 * Danny Hong <danny@ee.columbia.edu>
 *
 */
 

/*
 * Audio Parser
 *
 * This example looks at magic numbers to determine an audio file 
 * format, and then, uses appropriate parser to read through the format.
 *
 */

%import "aiff.fl"
%import "au.fl"
%import "wav.fl"
%import "raw.fl"


%pragma trace


class PCMsound {
    unsigned char bytesPerSample;   // both quantization and packing
    unsigned char samplesPerFrame;  // muliplexing (1 mono, 2 stereo, etc.)
    unsigned int  framesPerSecond;  // confusingly referred to (in other APIs)
                                    // as samplerate
    // describe the buffer
    unsigned long bytes;            // size of buffer in bytes
};


/*
 * Audio
 *
 */
class Audio {
    unsigned int(32)* magic;

    PCMsound sound;
    
    switch (magic) 
    {
    case 0x464F524D:    // "FORM"   -- AIFF/AIFC Format
        AIFF aiff;

		sound.bytesPerSample  = aiff.ckCommon.sampleSize >> 3;
		sound.samplesPerFrame = aiff.ckCommon.numChannels;
		// Convert an 80 bit IEEE Standard 754 floating point number to an int
		unsigned int  mantissa = aiff.ckCommon.sampleRate.mantissa_hi;
		unsigned char exponent = 30 - (aiff.ckCommon.sampleRate.exponent & 0xff);
		mantissa >>= exponent;
		sound.framesPerSecond = mantissa;

		sound.bytes = aiff.ckSound.ckSize;
        break;
    case 0x2E736E64:    // ".snd"   -- NeXT/Sun Format
        AU au;

		if (au.hd.dataFormat == AUDIO_FILE_ENCODING_LINEAR_32)
        	sound.bytesPerSample = 4;
		else if (au.hd.dataFormat == AUDIO_FILE_ENCODING_LINEAR_16)
        	sound.bytesPerSample = 2;
		else
        	sound.bytesPerSample = 1;
		sound.samplesPerFrame = au.hd.channelCount;
		sound.framesPerSecond = au.hd.samplingRate;

		sound.bytes = au.hd.dataSize;
        break;
    case 0x52494646:    // "RIFF"   -- WAV Format
        WAV wav;

        sound.bytesPerSample  = wav.ckFormat.bitsPerSample >> 3;
        sound.samplesPerFrame = wav.ckFormat.channels;
		sound.framesPerSecond = wav.ckFormat.samplesPerSec;

		sound.bytes = wav.ckData.ckSize;
        break;
    default:            // Raw Format
        Raw8 raw;
    }
}


class SampleData(Audio audio) {

%pragma notrace

    unsigned int data;
    if (audio.magic == 0x52494646) {    // "RIFF"   -- WAV Format
        if (audio.sound.bytesPerSample == 4)
            little int(32)        ldata;
        else if (audio.sound.bytesPerSample == 2)
            little int(16)        ldata;
        else
            little int(8)         ldata;
        data = ldata;
    }
    else {
        if (audio.sound.bytesPerSample == 4)
            int(32)        bdata;
        else if (audio.sound.bytesPerSample == 2)
            int(16)        bdata;
        else
            int(8)         bdata;
        data = bdata;
    }
}
